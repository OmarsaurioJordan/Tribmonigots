<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_criatura</parentName>
  <maskName>d_coli1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_ini_criaturas(id);
estado = m_est_general;
salirse = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch estado {
    case m_est_general:
        // inteligencia artificial
        if servidor {
            if s_errar(id, noone, true, false) {
                if mx == x and my == y {
                    // probabilidad saltar fuera del agua
                    if random(1) &lt; si_para_salesuelo(especie) {
                        if !place_meeting(x, y, o_solido) {
                            var sale = true;
                            switch especie {
                                case m_esp_ballena:
                                    sale = s_zona_homogenea(x, y, 200, m_bioma_mar); break;
                                case m_esp_tiburon:
                                    sale = s_zona_homogenea(x, y, 150, m_bioma_mar); break;
                                case m_esp_atun:
                                    sale = s_zona_homogenea(x, y, 100, m_bioma_mar); break;
                            }
                            if sale {
                                estado = m_est_subir;
                                break;
                            }
                        }
                    }
                    // probabilidad de salirse a tierra
                    else if random(1) &lt; si_para_actividad(especie) {
                        if especie == m_esp_tortuga or especie == m_esp_cocodrilo {
                            if s_mizona(x, y) == m_bioma_rio {
                                salirse = true;
                                estado = m_est_subir;
                                break;
                            }
                        }
                    }
                }
            }
            s_colision(id);
            if s_mover(id, mx, my, true) {
                reloj_errar = 0;
            }
            s_previene_escape(id, false, false);
        }
        break;
    case m_est_subir:
        zi += m_vel_salto * dt;
        if zi &gt;= 100 {
            zi = 100;
            if salirse {
                var aux = instance_create(x, y, o_animal);
                aux.vida = vida;
                if especie == m_esp_cocodrilo {
                    aux.especie = m_esp_lagarto; }
                else if especie == m_esp_tortuga {
                    aux.especie = m_esp_rana; }
                instance_destroy();
                exit;
            }
            else {
                estado = m_est_bajar; }
        }
        break;
    case m_est_bajar:
        zi -= m_vel_salto * dt;
        if zi &lt;= 0 {
            zi = 0;
            estado = m_est_general;
        }
        break;
}

// sincronizar con lo visual
s_sincroniza_xy(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if estado != m_est_general {
    var sub = clamp(floor(zi * 0.05), 0, 4);
    if estado == m_est_subir or especie != m_esp_salmon {
        draw_sprite(d_animal_oculto, (especie - 20) * 5 + sub, xi, yi);
    }
    else {
        draw_sprite(d_animal_oculto, 35 + sub, xi, yi);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
